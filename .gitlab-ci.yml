# GitLab CI configuration file for building SCHISM-ESMF docker
# images based on ubuntu
# 
# SPDX-FileCopyrightText: 2022 Helmholtz-Zentrum hereon
# SPDX-License-Identifier: CC0-1.0
# SPDX-FileContributor Carsten Lemmen <carsten.lemmen@hereon.de

# Stages are here defined as categorical only, as the CI/CD makes
# use of directed acyclic graph technique with the needs job keyword
stages:
    - lint
    - doc
    - build
    - docker
    - test

variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    VERSION: v8.4.0
    CONTAINER_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/schism-esmf:${VERSION}-${COMMUNICATOR}
    #CONTAINER_REGISTRY_BASEIMAGE: registry.hzdr.de/mossco/esmf-docker/esmf:${VERSION}-${COMMUNICATOR}
    CONTAINER_REGISTRY_BASEIMAGE: platipodium/esmf:${VERSION}-${COMMUNICATOR}
    SCHISM_DIR: "/builds/schism/schism-esmf/devel/schism"
    SCHISM_BUILD_DIR: "/builds/schism/schism-esmf/devel/schism/build"
    SCHISM_ESMF_DIR: "/builds/schism/schism-esmf/devel/schism-esmf"
    OLDIO: "ON"
    TVD_LIM: "SB"
 
license-compliance:
    image: python:3.11
    stage: lint
    needs: []
    before_script:
        - pip install --upgrade pip
        - pip install poetry
        - poetry install
    script:
        - poetry run reuse lint
    allow_failure: true

mike-documentation:
    image: python:3.11
    stage: doc
    needs: []
    before_script:
        - pip install --upgrade pip
        - pip install mkdocs-material mike
        - git config --local user.email "github-actions[bot]@users.noreply.github.com"
        - git config --local user.name "github-actions[bot]"
 
    script:
        - mike deploy --force --update-aliases master stable
        - mike retitle master stable
        - mike set-default --push stable
    artifacts:
        paths:
            - site/
    allow_failure: true

build-schism: 
    image: ${CONTAINER_REGISTRY_BASEIMAGE}
    stage: build
    needs: []

    parallel:
        matrix:
            - COMMUNICATOR: ["openmpi", "mpich"]
 
    before_script:
        - git clone  --branch master --depth 1 https://github.com/schism-dev/schism ${SCHISM_DIR}
    script: 
        - mkdir -p ${SCHISM_BUILD_DIR}
        - cmake -S ${SCHISM_DIR}/src -B ${SCHISM_BUILD_DIR} -DOLDIO=${OLDIO} -DTVD_LIM=${TVD_LIM}
        - make -C ${SCHISM_BUILD_DIR} -j8 pschism
        - ls -1 ./devel/schism/build/lib/* || true

    artifacts:
        paths: 
            - ./devel/schism/build/include/
            - ./devel/schism/build/lib/
            - ./devel/schism/build/bin/pschis*
        expire_in: 20 minutes

    allow_failure: false
    interruptible: true

build-schism-esmf: 
    image: ${CONTAINER_REGISTRY_BASEIMAGE}
    stage: build
    needs: 
      - build-schism
    parallel:
        matrix:
            - COMMUNICATOR: ["openmpi", "mpich"]
            - COMMUNICATOR: ["openmpi"]
    before_script:
        - git clone --branch master --depth 1 https://github.com/schism-dev/schism-esmf ${SCHISM_ESMF_DIR}
    script: 
        - make -C ${SCHISM_ESMF_DIR} -j1 lib # parallel build fails
        - make -C ${SCHISM_ESMF_DIR} -j1 install
    allow_failure: true
    interruptible: true

build-docker:
    image: docker:20.10.22
    services:
        - docker:20.10.22-dind
    parallel:
        matrix:
            - COMMUNICATOR: ["openmpi"]
#            - COMMUNICATOR: ["openmpi", "mpich"]
    allow_failure: true
    interruptible: true
    stage: docker
    needs: []
    before_script: 
        - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

    script:
        - docker build -t ${CONTAINER_REGISTRY_IMAGE} --build-arg VERSION=${VERSION} --build-arg COMMUNICATOR=${COMMUNICATOR} .
        - docker push ${CONTAINER_REGISTRY_IMAGE}

test-docker:
    image: docker:20.10.22
    services:
        - docker:20.10.22-dind
    parallel:
        matrix:
            - COMMUNICATOR: ["openmpi", "mpich"]
    allow_failure: true
    interruptible: true
    stage: test
    needs:
        - build-docker
    before_script: 
        - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    script:
        - docker pull ${CONTAINER_REGISTRY_IMAGE}
        - docker run ${CONTAINER_REGISTRY_IMAGE} /usr/local/bin/ESMF_PrintInfo
